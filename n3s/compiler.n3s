@prefix : <http://example.org/ns#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix graph: <http://www.w3.org/2000/10/swap/graph#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .

# Prohibition { action X } = Duty { NOT (action X) }
(_:X _:Y _:G) log:onNegativeSurface {
    _:X 
        a :PolicyTarget .

    () log:onProhibitionSurface _:G .

    () log:onNegativeSurface {
        () log:onDutySurface {
            () log:onNegativeSurface _:G .
        } .
    } .
} .

(_:X _:Y _:G) log:onNegativeSurface {
    _:X 
        a :PolicyTarget .

    () log:onNegativeSurface {
        () log:onProhibitionSurface _:G .
    } .

    () log:onNegativeSurface {
        () log:onNegativeSurface {
            () log:onDutySurface {
                () log:onNegativeSurface _:G .
            } .
        } .
    } .
} .

# Permission { action X } = NOT { Prohibition action X }
(_:X _:Y _:G) log:onNegativeSurface {
    _:X 
        a :PolicyTarget .

    () log:onPermissionSurface _:G .

    () log:onNegativeSurface {
        _:X a :PolicyTarget . # Due to a bug in eye this line is needed
        () log:onNegativeSurface {
            () log:onProhibitionSurface _:G .
        } .
    } .
} .


(_:X _:Y _:G) log:onNegativeSurface {
    _:X 
        a :PolicyTarget .

    () log:onNegativeSurface {
        () log:onPermissionSurface _:G .
    } .

    () log:onNegativeSurface {
        _:X a :PolicyTarget . # Due to a bug in eye this line is needed
        () log:onProhibitionSurface _:G .
    } .
} .

# IF Duty { action X } THEN { Permission action X }
(_:X _:Y _:G) log:onNegativeSurface {
    _:X 
        a :PolicyTarget .

    () log:onDutySurface _:G .
    
    () log:onNegativeSurface {
        () log:onPermissionSurface _:G .
    } .
} .

# IF Duty { action X } AND Duty { action Y } THEN Duty { action X,Y }
(_:X _:G1 _:G2 _:G) log:onNegativeSurface {
    _:X
        a :PolicyTarget .

    () log:onDutySurface _:G1 .
    () log:onDutySurface _:G2 .

    (_:G1 _:G2) graph:union _:G .

    () log:onNegativeSurface {
        () log:onDutySurface _:G .
    } .
}.

# Evaluate the deontic services to find contradictions. 
# ..We do this only for Duty and Prohibition surfaces because
# ..a contradiction in those means that in any possible world
# ..there is a contradiction. This does not have to be the 
# ..case for a Permission surface (that may not hold in any
# ..possible world).
# 
(_:G _:H _:L _:Sat _:S) log:onNegativeSurface {
    () log:onProhibitionSurface _:G .

    _:G graph:length _:L .
    _:L log:notEqualTo 0 .

    # Check if the surface contains a contradiction
    (
        { _:G log:conclusion _:H }
        { _:Sat log:equalTo true  } 
        { _:Sat log:equalTo false  }
    ) log:ifThenElseIn _:S.

    _:Sat log:equalTo false .
} .

(_:G _:H _:L _:Sat _:S) log:onNegativeSurface {
    () log:onDutySurface _:G .

    _:G graph:length _:L .
    _:L log:notEqualTo 0 .

    # Check if the surface contains a contradiction
    (
        { _:G log:conclusion _:H }
        { _:Sat log:equalTo true  } 
        { _:Sat log:equalTo false  }
    ) log:ifThenElseIn _:S.

    _:Sat log:equalTo false .
} .